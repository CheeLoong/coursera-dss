)
ggplot(dat, aes(x = x, fill = what)) + geom_density(size = 2, alpha = .2);
dat <- data.frame(
x = c(sample(1 : 6, nosim, replace = TRUE),
apply(matrix(sample(1 : 6, nosim * 2, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 3, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(1 : 6, nosim * 4, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(1 : 4, rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.25, colour = "black")
g + facet_grid(. ~ size)
dat <- data.frame(
x = c(sample(0 : 1, nosim, replace = TRUE),
apply(matrix(sample(0 : 1, nosim * 10, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 20, replace = TRUE),
nosim), 1, mean),
apply(matrix(sample(0 : 1, nosim * 30, replace = TRUE),
nosim), 1, mean)
),
size = factor(rep(c(1, 10, 20, 30), rep(nosim, 4))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth = 1 / 12, colour = "black");
g + facet_grid(. ~ size)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Expected Value for PDFs.R')
library(ggplot2)
xvals <- seq(-10, 10, by = .01)
dat <- data.frame(
y = c(
dnorm(xvals, mean = 0, sd = 1),
dnorm(xvals, mean = 0, sd = 2),
dnorm(xvals, mean = 0, sd = 3),
dnorm(xvals, mean = 0, sd = 4)
),
x = rep(xvals, 4),
factor = factor(rep(1 : 4, rep(length(xvals), 4)))
)
ggplot(dat, aes(x = x, y = y, color = factor)) + geom_line(size = 2)
library(ggplot2)
nosim <- 10000;
dat <- data.frame(
x = c(apply(matrix(rnorm(nosim * 10), nosim), 1, var),
apply(matrix(rnorm(nosim * 20), nosim), 1, var),
apply(matrix(rnorm(nosim * 30), nosim), 1, var)),
n = factor(rep(c("10", "20", "30"), c(nosim, nosim, nosim)))
)
ggplot(dat, aes(x = x, fill = n)) + geom_density(size = 2, alpha = .2) + geom_vline(xintercept = 1, size = 2)
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, var),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, var),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, var)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black")
g <- g + geom_vline(xintercept = 2.92, size = 2)
g + facet_grid(. ~ size)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Variance simulation examples.R')
pbeta(c(0.4, 0.5, 0.6), 2, 1)
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
nosim <- 1000
n <- 10
sd(apply(matrix(rnorm(nosim*n), nosim), 1, mean))
1 / sqrt(n)
sd(apply(matrix(runif(nosim*n), nosim), 1, mean))
1 / sqrt(12*n)
sd(apply(matrix(rpois(nosim*n, 4), nosim), 1, mean))
2/sqrt(n)
sd(apply(matrix(sample(0:1, nosim*n, replace = TRUE), nosim), 1, mean))
1/(2* sqrt(n))
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Standard error of the mean simulations.R')
library(UsingR); data(father.son);
x <- father.son$sheight
n<-length(x)
g <- ggplot(data = father.son, aes(x = sheight))
g <- g + geom_histogram(aes(y = ..density..), fill = "lightblue", binwidth=1, colour = "black")
g <- g + geom_density(size = 2, colour = "black")
g
round(c(var(x), var(x) / n, sd(x), sd(x) / sqrt(n)),2)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Variance Data Example.R')
choose(8, 7) * 0.5^8 + choose(8, 8)* 0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Binomial distributions.R')
pnorm(1160, mean = 1020, sd = 50, lower.tail = FALSE)
pnorm(2.8, lower.tail = FALSE)
qnorm(0.75, mean = 1020, sd = 50)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Normal distributions.R')
ppois(3, lambda = 2.5 * 4)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lamda = 500 * 0.01)
ppois(2, lambda = 500 * 0.01)
pbinom(2, size = 500, prob = 0.01)
ppois(2, lambda = 500 * 0.01)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Poisson distributions.R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Poisson distributions.R')
means <- cumsum(rnorm(n))/(1:n)
n <- 1000
means <- cumsum(rnorm(n))/(1:n)
means
n <- 10000; means <- cumsum(rnorm(n)) / (1  : n); library(ggplot2)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
means <- cumsum(sample(0 : 1, n , replace = TRUE)) / (1  : n)
g <- ggplot(data.frame(x = 1 : n, y = means), aes(x = x, y = y))
g <- g + geom_hline(yintercept = 0.5) + geom_line(size = 2)
g <- g + labs(x = "Number of obs", y = "Cumulative mean")
g
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Asymptotics and LLN.R')
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Asymptotics and the CLT.R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Asymptotics and the CLT.R')
library(UsingR);data(father.son); x <- father.son$sheight
(mean(x) + c(-1, 1) * qnorm(.975) * sd(x) / sqrt(length(x))) / 12
binom.test(56, 100)$conf.int
0.56 + c(-1, 1) * qnorm(.975) * sqrt(0.56 * 0.44/ 100)
binom.test(56, 100)$conf.int
binom.test(56, 100)$conf.int
n <- 20; pvals <- seq(.1, .9, by = .05); nosim <- 1000
pvals
coverage <- sapply(pvals, function(p){
phats <- rbinom(nosim, prob = p, size = n) / n
ll <- phats - qnorm(.975) * sqrt(phats * (1 - phats) / n)
ul <- phats + qnorm(.975) * sqrt(phats * (1 - phats) / n)
mean(ll < p & ul > p)
})
coverage
pvals
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Asymptotics and Confidence Intervals.R')
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
library("ggplot")
library("ggplot2")
library("ggplot2")
nosim <- 1000
cfunc <- function(x, n) sqrt(n) * (mean(x) - 3.5) / 1.71
dat <- data.frame(
x = c(apply(matrix(sample(1 : 6, nosim * 10, replace = TRUE),
nosim), 1, cfunc, 10),
apply(matrix(sample(1 : 6, nosim * 20, replace = TRUE),
nosim), 1, cfunc, 20),
apply(matrix(sample(1 : 6, nosim * 30, replace = TRUE),
nosim), 1, cfunc, 30)
),
size = factor(rep(c(10, 20, 30), rep(nosim, 3))))
g <- ggplot(dat, aes(x = x, fill = size)) + geom_histogram(alpha = .20, binwidth=.3, colour = "black", aes(y = ..density..))
g <- g + stat_function(fun = dnorm, size = 2)
g + facet_grid(. ~ size)
data(sleep)
head(sleep)
sleep
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
View(sleep)
g
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(difference)
t.test(g2, g1, paired = TRUE)
t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)
t.test(difference)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/T confidence intervals example.R')
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
n1 <- length(g1); n2 <- length(g2)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
data(sleep)
head(sleep)
library(ggplot2)
g <- ggplot(sleep, aes(x = group, y = extra, group = factor(ID)))
g <- g + geom_line(size = 1, aes(colour = ID)) + geom_point(size =10, pch = 21, fill = "salmon", alpha = .5)
g
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
difference <- g2 - g1
mn <- mean(difference); s <- sd(difference); n <- 10
rbind(
mn + c(-1, 1) * qt(.975, n-1) * s / sqrt(n),
as.vector(t.test(difference)$conf.int),
as.vector(t.test(g2, g1, paired = TRUE)$conf.int),
as.vector(t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)$conf.int)
)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
x1 <- mean(g1) ; x2 <- mean(g2)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
x1 <- mean(g1) ; x2 <- mean(g2)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
g1
mea(g1)
mean(g1)
x1 <- mean(g1) ; x2 <- mean(g2)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
n1
class(n1)
unclass(n1)
n1
class(n1)
n1-1
sd(x1)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
n1 <- length(g1); n2 <- length(g2)
sleep
x1 <- sleep$extra[1 : 10]; x2 <- sleep$extra[11 : 20]
n1 <- length(x1); n2 <- length(x2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
ChickWeight
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
?ChickWeight
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
wideCW2 <- dcast(ChickWeight, Diet + Chick ~ Time)
View(wideCW2)
rm(wideCW2)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Independent group T intervals.R')
?z.test
?t.test
?rnorm
rnorm(100, mean = 1.2, sd = 0.5)
x = rnorm(100, mean = 1.2, sd = 0.5)
x
mean(x)
sigma(x)
sd(x)
?t.test
t.test(x, y = 1.2, alternative = two.sided, paired = FALSE, var.equal = TRUE, conf.level = 0.95)
t.test(x, y = 1.2, alternative = "two.sided", paired = FALSE, var.equal = TRUE, conf.level = 0.95)
t.test(x, alternative = "two.sided", mu = 1.2, paired = FALSE, var.equal = TRUE, conf.level = 0.95)
t.tet
t.test
?t.test
x <- c(15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
mean(x)
s.d(x)
sd(x)
t.test(x, mu = 20, alt = "less", conf = 0.99)
T.TEST <- t.test(x, mu = 20, alt = "less", conf = 0.99)
attributes(T.TEST)
T.TEST$conf.int
T.TEST$p.value
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One Sample T-test in R.R')
T.TEST <- t.test(x, mu = 20, alt = "less", conf = 0.99)
T.TEST
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One Sample T-test in R.R')
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
getwd
getwd()
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
attach(LungCapData)
names(LungCapData)
class(LungCapData)
t.test(LungCapData, mu = 8, alt = "less", conf= 0.95)
t.test(LungCap, mu = 8, alt = "less", conf= 0.95)
t.test(LungCap, mu = 8, alt = "two.sided", conf = 0.95)
TEST <- t.test(LungCap, mu = 8, alt = "two.sided", conf = 0.95)
TEST
attributes(TEST)
TEST$p.value
TEST$conf.int
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
names(LungCapData)
class(LungCapData)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
boxplot(LungCap ~ Smoke)
t.test(LungCap ~ Smoke, mu = 0, alt = "two.sided", conf = 0.95, var.eq = F, paired = F)
t.test(LungCap ~ Smoke)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
t.test(LungCap ~ Smoke)
t.test(LungCap[Smoke == "no"], LungCap[Smoke == "yes"])
boxplot(LungCap ~ Smoke)
LungCap[Smoke == "yes"]
var(LungCap[Smoke == "yes"])
var(LungCap[Smoke == "no"])
library(car)
leveneTest(LungCap ~ Smoke)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
attach(father.son)
t.test(sheight - fheight)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = T)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = F, var.equal = F)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = F, var.equal = F)
(sheight - fheight)
t.test(sheight - fheight)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = F, var.equal = F)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
t.test(sheight - fheight)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
var(sheight)
var(fheight)
library(car)
leveneTest(sheight ~ fheight)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = T)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
binom.test(8, 6, p = 0.5)
binom.test(6, 8, p = 0.5)
binom.test(6, 8, p = 0.5, alt = "more")
binom.test(6, 8, p = 0.5, alt = "greater")
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
binom.test(7, 8, p = 0.5, alt = "greater")
pbinom(3, size = 8, prob = 0.5, lower.tail = FALSE)
binom.test(4, 8, p = 0.5, alt = "greater")
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
binom.test(7, 8, p = 0.5, alt = "greater")
binom.test(7, size = 8, p = 0.5, alt = "greater")
?binom.test
binom.test(x = 7, n = 8, p = 0.5, alt = "greater")
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
binom.test(x = 7, n = 8, p = 0.5, alt = "greater")
?ppois
?binom.test
?poisson.test
ppois(9, 5, lower.tail = F)
poisson.test(1, 100, 0.05, alt = "greater")
poisson.test(1, 100, 5, alt = "greater")
?ppois
?poisson.test
poisson.test( r = 5, alt = "greater")
poisson.test( x = 1, r = 5, alt = "greater")
poisson.test( x = 1, T = 100, r = 5, alt = "greater")
?poisson.test
poisson.test( x = 10, T = 100, r = 5, alt = "greater")
ppois(9, 5, lower.tail = F)
poisson.test( x = 10, T = 100, r = 0.05, alt = "greater")
ppois(9, 5, lower.tail = F)
poisson.test( x = 10, T = 100, r = 0.05, alt = "greater")
mu0 = 30
mua = 32
n = 16
sigma = 4
alpha = 0.05
z <- qnorm( 1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = F)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = F)
