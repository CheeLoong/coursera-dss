as.vector(t.test(difference)$conf.int),
as.vector(t.test(g2, g1, paired = TRUE)$conf.int),
as.vector(t.test(extra ~ I(relevel(group, 2)), paired = TRUE, data = sleep)$conf.int)
)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
x1 <- mean(g1) ; x2 <- mean(g2)
sp <- sqrt((7 * 15.34^2 + 20 * 18.23^2) / (8 + 21 - 2))
132.86 - 127.44 + c(-1, 1) * qt(.975, 27) * sp * (1 / 8 + 1 / 21)^.5
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
x1 <- mean(g1) ; x2 <- mean(g2)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
g1
mea(g1)
mean(g1)
x1 <- mean(g1) ; x2 <- mean(g2)
n1 <- length(g1); n2 <- length(g2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
n1
class(n1)
unclass(n1)
n1
class(n1)
n1-1
sd(x1)
g1 <- sleep$extra[1 : 10]; g2 <- sleep$extra[11 : 20]
n1 <- length(g1); n2 <- length(g2)
sleep
x1 <- sleep$extra[1 : 10]; x2 <- sleep$extra[11 : 20]
n1 <- length(x1); n2 <- length(x2)
sp <- sqrt( ((n1 - 1) * sd(x1)^2 + (n2-1) * sd(x2)^2) / (n1 + n2-2))
md <- mean(g2) - mean(g1)
semd <- sp * sqrt(1 / n1 + 1/n2)
rbind(
md + c(-1, 1) * qt(.975, n1 + n2 - 2) * semd,
t.test(g2, g1, paired = FALSE, var.equal = TRUE)$conf,
t.test(g2, g1, paired = TRUE)$conf
)
library(datasets); data(ChickWeight); library(reshape2)
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
ChickWeight
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
?ChickWeight
wideCW <- dcast(ChickWeight, Diet + Chick ~ Time, value.var = "weight")
wideCW
wideCW2 <- dcast(ChickWeight, Diet + Chick ~ Time)
View(wideCW2)
rm(wideCW2)
names(wideCW)[-(1 : 2)] <- paste("time", names(wideCW)[-(1 : 2)], sep = "")
wideCW
library(dplyr)
wideCW <- mutate(wideCW,
gain = time21 - time0
)
wideCW
g <- ggplot(ChickWeight, aes(x = Time, y = weight,
colour = Diet, group = Chick))
g <- g + geom_line()
g <- g + stat_summary(aes(group = 1), geom = "line", fun.y = mean, size = 1, col = "black")
g <- g + facet_grid(. ~ Diet)
g
g <- ggplot(wideCW, aes(x = factor(Diet), y = gain, fill = factor(Diet)))
g <- g + geom_violin(col = "black", size = 2)
g
wideCW14 <- subset(wideCW, Diet %in% c(1, 4))
rbind(
t.test(gain ~ Diet, paired = FALSE, var.equal = TRUE, data = wideCW14)$conf,
t.test(gain ~ Diet, paired = FALSE, var.equal = FALSE, data = wideCW14)$conf
)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Independent group T intervals.R')
?z.test
?t.test
?rnorm
rnorm(100, mean = 1.2, sd = 0.5)
x = rnorm(100, mean = 1.2, sd = 0.5)
x
mean(x)
sigma(x)
sd(x)
?t.test
t.test(x, y = 1.2, alternative = two.sided, paired = FALSE, var.equal = TRUE, conf.level = 0.95)
t.test(x, y = 1.2, alternative = "two.sided", paired = FALSE, var.equal = TRUE, conf.level = 0.95)
t.test(x, alternative = "two.sided", mu = 1.2, paired = FALSE, var.equal = TRUE, conf.level = 0.95)
t.tet
t.test
?t.test
x <- c(15.6, 16.2, 22.5, 20.5, 16.4, 19.4, 16.6, 17.9, 12.7, 13.9)
mean(x)
s.d(x)
sd(x)
t.test(x, mu = 20, alt = "less", conf = 0.99)
T.TEST <- t.test(x, mu = 20, alt = "less", conf = 0.99)
attributes(T.TEST)
T.TEST$conf.int
T.TEST$p.value
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One Sample T-test in R.R')
T.TEST <- t.test(x, mu = 20, alt = "less", conf = 0.99)
T.TEST
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One Sample T-test in R.R')
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
getwd
getwd()
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
attach(LungCapData)
names(LungCapData)
class(LungCapData)
t.test(LungCapData, mu = 8, alt = "less", conf= 0.95)
t.test(LungCap, mu = 8, alt = "less", conf= 0.95)
t.test(LungCap, mu = 8, alt = "two.sided", conf = 0.95)
TEST <- t.test(LungCap, mu = 8, alt = "two.sided", conf = 0.95)
TEST
attributes(TEST)
TEST$p.value
TEST$conf.int
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
source('~/Desktop/coursera-dss/Statistical Inference Week 1/One-Sample t Test in R (MarinStatsLectures).R')
LungCapData <- read.table(file.choose(), header = T, sep = "\t")
names(LungCapData)
class(LungCapData)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
boxplot(LungCap ~ Smoke)
t.test(LungCap ~ Smoke, mu = 0, alt = "two.sided", conf = 0.95, var.eq = F, paired = F)
t.test(LungCap ~ Smoke)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
t.test(LungCap ~ Smoke)
t.test(LungCap[Smoke == "no"], LungCap[Smoke == "yes"])
boxplot(LungCap ~ Smoke)
LungCap[Smoke == "yes"]
var(LungCap[Smoke == "yes"])
var(LungCap[Smoke == "no"])
library(car)
leveneTest(LungCap ~ Smoke)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Two-Sample t Test in R- Independent Groups.R')
library(UsingR)
data(father.son)
t.test(father.son$sheight - father.son$fheight)
attach(father.son)
t.test(sheight - fheight)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = T)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = F, var.equal = F)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = F, var.equal = F)
(sheight - fheight)
t.test(sheight - fheight)
t.test(sheight - fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = F, var.equal = F)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
t.test(sheight - fheight)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
var(sheight)
var(fheight)
library(car)
leveneTest(sheight ~ fheight)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = T)
t.test(sheight, fheight, mu = 0, alt = "two.sided", conf = 0.95, paired = T, var.equal = F)
binom.test(8, 6, p = 0.5)
binom.test(6, 8, p = 0.5)
binom.test(6, 8, p = 0.5, alt = "more")
binom.test(6, 8, p = 0.5, alt = "greater")
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
binom.test(7, 8, p = 0.5, alt = "greater")
pbinom(3, size = 8, prob = 0.5, lower.tail = FALSE)
binom.test(4, 8, p = 0.5, alt = "greater")
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
binom.test(7, 8, p = 0.5, alt = "greater")
binom.test(7, size = 8, p = 0.5, alt = "greater")
?binom.test
binom.test(x = 7, n = 8, p = 0.5, alt = "greater")
choose(8,7)*0.5^8 + choose(8,8)*0.5^8
pbinom(6, size = 8, prob = 0.5, lower.tail = FALSE)
binom.test(x = 7, n = 8, p = 0.5, alt = "greater")
?ppois
?binom.test
?poisson.test
ppois(9, 5, lower.tail = F)
poisson.test(1, 100, 0.05, alt = "greater")
poisson.test(1, 100, 5, alt = "greater")
?ppois
?poisson.test
poisson.test( r = 5, alt = "greater")
poisson.test( x = 1, r = 5, alt = "greater")
poisson.test( x = 1, T = 100, r = 5, alt = "greater")
?poisson.test
poisson.test( x = 10, T = 100, r = 5, alt = "greater")
ppois(9, 5, lower.tail = F)
poisson.test( x = 10, T = 100, r = 0.05, alt = "greater")
ppois(9, 5, lower.tail = F)
poisson.test( x = 10, T = 100, r = 0.05, alt = "greater")
mu0 = 30
mua = 32
n = 16
sigma = 4
alpha = 0.05
z <- qnorm( 1 - alpha)
pnorm(mu0 + z * sigma/sqrt(n), mean = mu0, sd = sigma/sqrt(n), lower.tail = F)
pnorm(mu0 + z * sigma/sqrt(n), mean = mua, sd = sigma/sqrt(n), lower.tail = F)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
n
B <- 10000
?sample
x = c(1:10)
sample(x, 5, replace = TRUE)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
x
n
sample(x, n * B, replace = TRUE)
resamples <- matrix(sample(x, n * B, replace = T), B, n)
resamples
resampledMedians <- apply(resamples, 1, median)
mean(resampledMedians)
?apply
library(UsingR)
data(father.son)
library(UsingR)
data(father.son)
x <- father.son$sheight
n <- length(x)
B <- 10000
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
resampledMedians <- apply(resamples, 1, median)
g = ggplot(data.frame(x = resampledMedians), aes(x = x))
g = g + geom_density(size = 2, fill = "red")
g = g + geom_histogram(alpha = .20, binwidth=.3, colour = "black", fill = "blue", aes(y = ..density..))
g = g + geom_vline(xintercept = median(x), size = 2)
g
g = ggplot(data.frame(x = resampledMedians), aes(x = x))
g = g + geom_density(size = 2, fill = "red")
g = g + geom_vline(xintercept = median(x), size = 2)
g
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Bootstrapping.R')
resamples <- matrix(sample(x, n * B, replace = TRUE), B, n)
medians <- apply(resamples, 1, median)
sd(medians)
quantile(medians, c(.025, .975))
g = ggplot(data.frame(medians = medians), aes(x = medians))
g = g + geom_histogram(color = "black", fill = "lightblue", binwidth = 0.05)
g
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Bootstrapping.R')
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
subdata
y <- subdata$count
y
group <- as.character(subdata$spray)
group
y$1
y[1]
y[2]
y[3]
group[1]
mean(w[g == "B"])
mean(g == "B")
mean["B"]
mean[ g == "B"]
mean(count)
mean(y)
y
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"])
testStat
observedStat <- testStat(y, group)
observedStat <- testStat(y, group)
mean(permutations > observedStat)
observedStat <- testStat(y, group)
y
group
?sapply
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
permutations
observedStat
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
group
sample(group)
mean(permutations > observedStat)
source('~/Desktop/coursera-dss/Statistical Inference Week 1/Permutation tests.R')
x = c(1:7)
t = 5
mean ( x > t)
x > t
2/7
subdata <- InsectSprays[InsectSprays$spray %in% c("B", "C"),]
y <- subdata$count
group <- as.character(subdata$spray)
testStat <- function(w, g) mean(w[g == "B"]) - mean(w[g == "C"]) # function to calculate t-stats
observedStat <- testStat(y, group)
permutations <- sapply(1 : 10000, function(i) testStat(y, sample(group)))
observedStat
mean(permutations > observedStat)
library(UsingR); data(galton); library(reshape);
galton
long <- melt(galton)
long
long <- melt(galton)
library(UsingR); data(galton); library(reshape);
install.packages(reshape)
install.packages("reshape")
library(UsingR); data(galton); library(reshape);
galton
long <- melt(galton)
long
head(galton)
head(long)
g <- ggplot(long, aes(x = value, fill = variable))
g
g <- g + geom_histogram(colour = "black", binwidth = 1)
g
g <- ggplot(long, aes(x = value, fill = variable)) ; g
g <- g + geom_histogram(colour = "black", binwidth = 1) ; g
g <- g + facet_grid(. ~ variable) ; g
g <- ggplot(long, aes(x = value, fill = variable)) ; g
g <- g + geom_histogram(colour = "black", binwidth = 1) ; g
g <- g + facet_grid(. ~ variable) ; g
x <- c(1:5)
mse <- mean(x - mu)^2
mu <- mean(x)
mse <- mean(x - mu)^2
mse <- mean((x-mu)^2)
x <- c(1:5)
mse <- mean(x - mu)^2
mse <- mean((x - mu)^2)
mu = mean(x)
library(manipulate)
rm(mu)
rm(mse)
x <- c(1:5)
mse <- mean((x - mu)^2) ## mse should give 2
library(manipulate)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
library(manipulate); library(ggplot)
library(manipulate); library(ggplot2)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.1))
class(x)
x <- as.numeric(x)
library(manipulate); library(ggplot2)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.1))
x <- as.data.frame(x)
library(manipulate); library(ggplot2)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.1))
manipulate(myHist(mu), mu = slider(0, 10, step = 0.25))
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), ))
g
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), ))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2)))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = "xx"))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2) sep = ""))
g
}
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2) sep = ""))
g
}
library(manipulate); library(ggplot2)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2) sep = ""))
g
}
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "black", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
library(manipulate); library(ggplot2)
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=2)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=1)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=0.25)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
myHist <- function(mu){
mse <- mean((x - mu)^2)
g <- ggplot(x, aes(x = x)) + geom_histogram(fill = "salmon", colour = "red", binwidth=0.5)
g <- g + geom_vline(xintercept = mu, size = 3)
g <- g + ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu = slider(0, 10, step = 0.5))
getwd()
