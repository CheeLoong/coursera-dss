points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers = 3) # perform k-means clustering analysis and set 3 centroids
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4)) # Setting up the margin for the graphic device
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 5)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
par(mfrow = c(1, 4))
par(mar = 4.5, 4.1, 4.1, 2.1)
set.seed(1234)
par(mfrow = c(1, 4))
par(mar = 2, 2, 2, 2)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
image(dataMatrix)
box()
title(main = "dataMatrix", font.main = 4)
set.seed(1234)
par(mfrow = c(1, 4))
par(mar = 4, 4, 4, 4)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
image(dataMatrix)
box()
title(main = "dataMatrix", font.main = 4)
image(t(dataMatrix))
box()
title(main = "t(dataMatrix)", font.main = 4) # Transpose
image(t(dataMatrix)[,nrow(dataMatrix):1])
box()
title(main = "t(datamatrix)[,12:1]", font.main = 4) # Inverse the columns (this heat map is alligned with the dataframe)
image(t(dataMatrix)[,order(kmeansObj$cluster)])
box()
title(main = "t(dataMatrix)[,order(kmeansObj$cluster)]", font.main = 4) # re-order the columns based on clusters
kmeansObj <- kmeans(dataMatrix, centers=3)
par(mfrow=c(1,2), mar = c(2, 4, 0.1, 0.1))
image(t(dataMatrix)[,nrow(dataMatrix):1]) # t = transpose
image(t(dataMatrix)[,order(kmeansObj$cluster)])
set.seed(1234)
x <- rnorm(12, mean = rep(1:3, each = 4), sd = 0.2)
y <- rnorm(12, mean = rep(c(1, 2, 1), each = 4), sd = 0.2)
plot(x, y, col = "blue", pch = 19, cex = 2)
text(x + 0.05, y + 0.05, labels = as.character(1:12))
dataFrame <- data.frame(x,y)
kmeansObj <- kmeans(dataFrame, centers = 3) # perform k-means clustering analysis and set 3 centroids
names(kmeansObj)
kmeansObj$cluster
par(mar = rep(0.2, 4)) # Setting up the margin for the graphic device
plot(x, y, col = kmeansObj$cluster, pch = 19, cex = 2)
points(kmeansObj$centers, col = 1:3, pch = 3, cex = 3, lwd = 3)
set.seed(1234)
par(mfrow = c(1, 4))
par(mar = 4, 4, 4, 4)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
image(dataMatrix)
box()
title(main = "dataMatrix", font.main = 4)
par("mar")
par(mar = 4, 4, 4, 4)
set.seed(1234)
par(mfrow = c(1, 4))
par(mar = c(4, 4, 4, 4))
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
image(dataMatrix)
box()
title(main = "dataMatrix", font.main = 4)
image(t(dataMatrix))
box()
title(main = "t(dataMatrix)", font.main = 4) # Transpose
image(t(dataMatrix)[,nrow(dataMatrix):1])
box()
title(main = "t(datamatrix)[,12:1]", font.main = 4) # Inverse the columns (this heat map is alligned with the dataframe)
image(t(dataMatrix)[,order(kmeansObj$cluster)])
box()
title(main = "t(dataMatrix)[,order(kmeansObj$cluster)]", font.main = 4) # re-order the columns based on clusters
set.seed(1234)
par(mfrow = c(1, 4))
par(mar = c(4, 4, 4, 4))
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
image(dataMatrix)
box()
title(main = "dataMatrix", font.main = 4)
image(t(dataMatrix))
box()
title(main = "t(dataMatrix)", font.main = 4) # Transpose
image(t(dataMatrix)[,nrow(dataMatrix):1])
box()
title(main = "t(datamatrix)[,12:1]", font.main = 4) # Inverse the columns (this heat map is alligned with the dataframe)
image(t(dataMatrix)[,order(kmeansObj$cluster)])
box()
title(main = "t(dataMatrix)[,order(kmeansObj$cluster)]", font.main = 4) # re-order the columns based on clusters
dataMatrix
datamatrix
dataMatrix
image(t(dataMatrix)[,order(kmeansObj$cluster)])
box()
title(main = "t(dataMatrix)[,order(kmeansObj$cluster)]", font.main = 4) # re-order the columns based on clusters
set.seed(1234)
dataMatrix <- as.matrix(dataFrame)[sample(1:12),]
dataMatrix
kmeansObj <- kmeans(dataMatrix, centers = 3)
par(mfrow = c(1, 4), mar = c(4, 4, 4, 4))
image(dataMatrix)
box()
title(main = "dataMatrix", font.main = 4)
image(t(dataMatrix))
box()
title(main = "t(dataMatrix)", font.main = 4) # Transpose
image(t(dataMatrix)[,nrow(dataMatrix):1])
box()
title(main = "t(datamatrix)[,12:1]", font.main = 4) # Inverse the columns (this heat map is alligned with the dataframe)
dataMatrix
image(t(dataMatrix)[,order(kmeansObj$cluster)])
box()
title(main = "t(dataMatrix)[,order(kmeansObj$cluster)]", font.main = 4) # re-order the columns based on clusters
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/K-Means Clustering (part 2).R')
dataMatrix
t(datamatrix)[,12:1]
t(dataMatrix)[,12:1]
t(dataMatrix)
dataMatrix
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/K-Means Clustering (part 2).R')
set.seed(12345)
par(mar = rep(0.2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
set.seed(12345)
par(mar = rep(0.5, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1])
?image
dataMatrix <- matrix(rnorm(400), nrow = 40)
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 1).R')
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
image(t(dataMatrix)[, nrow(dataMatrix):1])
dataMatrix
par(mar = rep(0.2, 4))
heatmap(dataMatrix) # run hierarchical analysis on this dataset; no particular pattern because its random generated
rep(3)
?rep
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5) # the pattern: 5 of the columns have a mean of 0, the other 5 have a mean of 3
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1]) # the right hand 5 columns are more yellow means higher value, red means lower value (left 5: mean of 0, right 5: mean of 3)
par(mar = rep(0.2, 4))
heatmap(dataMatrix) # run hierarchical clustering using heatmap; shows data splits into 2 clusters, on the row there's no apparent cluster
hh <- hclust(dist(dataMatrix)) # perform hierarchical clustering
dataMatrixOrdered <- dataMatrix[hh$order, ] # reorder according to the hierarchical analysis of the rows
par(mar = rep(5, 4))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rowMeans(dataMatrixOrdered), 40:1, xlab = "Row Mean", ylab = "Row", pch = 19)
plot(colMeans(dataMatrixOrdered), xlab = "Column", ylab = "Column Mean", pch = 19)
hh$order
hh$order
dataMatrix
dataMatrixOrdered
hh$order
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 1).R')
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 1).R')
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5) # the pattern: 5 of the columns have a mean of 0, the other 5 have a mean of 3
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrixOrdered <- dataMatrix[hh$order, ]
dev.off()
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5) # the pattern: 5 of the columns have a mean of 0, the other 5 have a mean of 3
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector"), pch = 19)
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
svd1 <- svd(scale(dataMatrixOrdered))
par(mar = rep(4, 4), mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19)
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
svd1
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd$1d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
svd1$d
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 2).R')
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pcal$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1", ylab = "Right Singular Vector 1")
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1", ylab = "Right Singular Vector 1")
abline(c(0,1))
constantMatrix <- dataMatrixOrdered*0
constantMatrix
for(i in 1:dim(dataMatrixOrdered)[1]{constantMatrix[i,] <- rep(c(0,1), each = 5)})
for(i in 1:dim(dataMatrixOrdered)[1]{constantMatrix[i,] <- rep(c(0,1), each = 5)}
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1), each = 5)}
svd1 <- svd(constantMatrix)
constantMatrix
dim(dataMatrixOrdered)
par(mfrow = c(1,3))
image(t(constantMatrix)[, nrow(constantMatrix):1])
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2)), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
plot(svd1$d^2/sum(svd1$d^2)), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
plot(svd1$d^2/sum(svd1$d^2)) xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
set.seed(678910)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
hh <- hclust(dist(dataMatrix))
set.seed(678910)
for(i in 1:40) {
# flip a coin
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip1){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), each = 5)
}
if(coinFlip2){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrix
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rep(c(0,1), each = 5), pch = 19, xlab = "Column", ylab = "Pattern 1")
plot(rep(c(0, 1), 5), pch = 19, xlab = "Column", ylab = "Pattern 2")
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 2).R')
dataMatrixOrdered
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$v[, 1], pch = 19, xlab = "Column", ylab = "First right singular vector")
plot(svd2$v[, 2], pch = 19, xlab = "Column", ylab = "Second right singular vector")
svd1 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 2))
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Percent of variance explained",
pch = 19)
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 2).R')
?svd
?scale
dataMatrixOrdered
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5) # the pattern: 5 of the columns have a mean of 0, the other 5 have a mean of 3
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrixOrdered
scale(dataMatrixOrdered)
x <- c(1,2,3)
scale(x)
x <- c(1:10)
scale(x)
rm(x)
?scale
(1-5.5)/3.02765
svd1 <- svd(scale(dataMatrixOrdered))
par(mar = rep(4, 4), mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd1$u[, 1], 40:1, xlab = "Row", ylab = "First left singular vector", pch = 19) # First left singular vector has negative values for rows 40 through 17, has a positive values for remaining rows, this shows clear separation in the means of the two sets of rows
plot(svd1$v[, 1], xlab = "Column", ylab = "First right singular vector", pch = 19)
par(mfrow = c(1, 2))
svd1 <- svd(scale(dataMatrixOrdered))
pca1 <- prcomp(dataMatrixOrdered, scale = TRUE)
plot(pca1$rotation[, 1], svd1$v[, 1], pch = 19, xlab = "Principal Component 1", ylab = "Right Singular Vector 1")
abline(c(0,1))
constantMatrix <- dataMatrixOrdered*0
for(i in 1:dim(dataMatrixOrdered)[1]){constantMatrix[i,] <- rep(c(0,1), each = 5)} # the first five columns are zeroes, the second five columns are ones
svd1 <- svd(constantMatrix)
par(mfrow = c(1,3))
image(t(constantMatrix)[, nrow(constantMatrix):1])
plot(svd1$d, xlab = "Column", ylab = "Singular value", pch = 19)
plot(svd1$d^2/sum(svd1$d^2), xlab = "Column", ylab = "Prop. of variance explained", pch = 19)
set.seed(678910)
for(i in 1:40) {
# flip a coin
coinFlip1 <- rbinom(1, size = 1, prob = 0.5)
coinFlip2 <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip1){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), each = 5)
}
# Second pattern is going to be alternating between the columns
if(coinFlip2){
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 5), 5)
}
}
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(rep(c(0, 1), each = 5), pch = 19, xlab = "Column", ylab = "Pattern 1")
plot(rep(c(0, 1), 5), pch = 19, xlab = "Column", ylab = "Pattern 2")
svd2 <- svd(scale(dataMatrixOrdered))
par(mfrow = c(1, 3))
image(t(dataMatrixOrdered)[, nrow(dataMatrixOrdered):1])
plot(svd2$v[, 1], pch = 19, xlab = "Column", ylab = "First right singular vector") # this panel roughly picks up the block mean pattern, the first five are somewhat lower, the other five are somewhat higher
plot(svd2$v[, 2], pch = 19, xlab = "Column", ylab = "Second right singular vector") # the second panel try to pick up the alternating mean pattern, althou not very obvious
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 2).R')
dataMatrix2 <- dataMatrixOrdered
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5) # the pattern: 5 of the columns have a mean of 0, the other 5 have a mean of 3
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample[1:100, size = 40, replace = FALSE]] <- NA
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
svd1 <- svd(scale(dataMatrix2))
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 3).R')
library(impute)
install.packages("impute")
source("https://bioconductor.org/biocLite.R")
biocLite("impute")
library(impute)
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
dataMatrix2 <- impute.knn(dataMatrix2)$data
svd1 <- svd(scale(dataMatrixOrdered)); svd2 <- svd(scale(dataMatrix2))
par(mfrow=c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch 19)
par(mfrow=c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch = 19)
set.seed(12345)
par(mar = rep(2, 4))
dataMatrix <- matrix(rnorm(400), nrow = 40)
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
set.seed(678910)
for (i in 1:40) {
# flip a coin
coinFlip <- rbinom(1, size = 1, prob = 0.5)
# if coin is heads add a common pattern to that row
if(coinFlip) {
dataMatrix[i, ] <- dataMatrix[i, ] + rep(c(0, 3), each = 5) # the pattern: 5 of the columns have a mean of 0, the other 5 have a mean of 3
}
}
par(mar = rep(0.2, 4))
image(1:10, 1:40, t(dataMatrix)[, nrow(dataMatrix):1])
par(mar = rep(0.2, 4))
heatmap(dataMatrix)
hh <- hclust(dist(dataMatrix))
dataMatrixOrdered <- dataMatrix[hh$order, ]
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
library(impute)
dataMatrix2 <- dataMatrixOrdered
dataMatrix2[sample(1:100, size = 40, replace = FALSE)] <- NA
dataMatrix2 <- impute.knn(dataMatrix2)$data # if k = 5, takes closest 5 points and take average to replace the NA value
svd1 <- svd(scale(dataMatrixOrdered)); svd2 <- svd(scale(dataMatrix2))
par(mfrow=c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch = 19)
par(mar = rep(4,4), mfrow=c(1,2)); plot(svd1$v[,1], pch = 19); plot(svd2$v[,1], pch = 19)
load("data/face.rda")
load("data/face.rda")
image(faceData)
image(t(faceData))
image(t(faceData)[, nrow(faceData):1]
par(mar = rep(4,4))
par(mar = rep(4,4))
par(mar = rep(4,4))
image(t(faceData)[, nrow(faceData):1])
svd1 <- svd(scale(faceData))
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Singular vector", ylab = "Variance explained"
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Singular vector", ylab = "Variance explained")
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Singular vector", ylab = "Variance explained")
svd1 <- svd(scale(faceData))
approx1 <- svd1$u[, 1] %*% t(svd1$v[, 1]) * svd1$d[1]
svd1$d[1]
svd1$u
approx1 <- svd1$u[, 1] %*% t(svd1$v[, 1]) * svd1$d[1]
svd1$u
svd1$u[, 1]
approx5 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5] %*% t(svd1$v[, 1:5]))
approx5 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5])
approx1
approx10 <- svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10])
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 3).R')
svd1 <- svd(scale(faceData))
load("data/face.rda")
par(mar = rep(4,4))
image(t(faceData)[, nrow(faceData):1])
svd1 <- svd(scale(faceData))
plot(svd1$d^2/sum(svd1$d^2), pch = 19, xlab = "Singular vector", ylab = "Variance explained")
svd1 <- svd(scale(faceData))
approx1 <- svd1$u[, 1] %*% t(svd1$v[, 1]) * svd1$d[1] # Uses only the first singular vector
approx5 <- svd1$u[, 1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[, 1:5]) # Uses the first 5 singular vectors
approx10 <- svd1$u[, 1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[, 1:10]) # Uses the first 10 singular vectors
approx1
par(mfrow = c(1, 4))
image(t(approx1)[, nrow(approx1): 1], main = "First singular vector")
image(t(approx5)[, nrow(approx5): 1], main = "First 5 singular vectors")
image(t(approx10)[, nrow(approx10): 1], main = "First 10 singular vectors")
image(t(faceData)[, nrow(faceData): 1], main = "Original Data")
View(approx1)
source('~/Desktop/coursera-dss/Exploratory Data Analysis Week 3/Dimensional Reduction (part 3).R')
<img class=center src=images/samsung.png height=450>
[http://www.samsung.com/global/galaxys3/](http://www.samsung.com/global/galaxys3/)
[Samsung data file]("https://dl.dropboxusercontent.com/u/7710864/courseraPublic/samsungData.rda")
```{r loaddata,tidy=TRUE}
load("data/samsungData.rda")
names(samsungData)[1:12]
table(samsungData$activity)
getwd()
