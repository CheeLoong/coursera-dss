getwd()
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
data(diamond)
library(UsingR)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
library(UsingR)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
summary(fit)$sigma
sqrt(sum(resid(fit)^2) / (n - 2))
source('~/Desktop/coursera-dss/Regression Modelling Week 2/Residual Variance.R')
library(UsingR); data(diamond)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
?sqrt
sqrt(25)
sd(x)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
sd(x)
?pt
pt(1.645, df = n - 2, lower.tail = FALSE)
2 * pt(1.645, df = n - 2, lower.tail = FALSE)
library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
beta1 <- cor(y, x) * sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
e <- y - beta0 - beta1 * x
sigma <- sqrt(sum(e^2) / (n-2))
ssx <- sum((x - mean(x))^2)
seBeta0 <- (1 / n + mean(x) ^ 2 / ssx) ^ .5 * sigma
seBeta1 <- sigma / sqrt(ssx)
tBeta0 <- beta0 / seBeta0; tBeta1 <- beta1 / seBeta1
pBeta0 <- 2 * pt(abs(tBeta0), df = n - 2, lower.tail = FALSE)
pBeta1 <- 2 * pt(abs(tBeta1), df = n - 2, lower.tail = FALSE)
coefTable <- rbind(c(beta0, seBeta0, tBeta0, pBeta0), c(beta1, seBeta1, tBeta1, pBeta1))
colnames(coefTable) <- c("Estimate", "Std. Error", "t value", "P(>|t|)")
rownames(coefTable) <- c("(Intercept)", "x")
coefTable
coefTable
fit <- lm(y ~ x)
summary(fit)$coefficients
umCoef <- summary(fit)$coefficients
sumCoef <- summary(fit)$coefficients
rm(umCoef)
sumCoef
sumCoef <- summary(fit)$coefficients
sumCoef
summary(fit)
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
sumCoef[1,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[1, 2]
(sumCoef[2,1] + c(-1, 1) * qt(.975, df = fit$df) * sumCoef[2, 2]) / 10
library(ggplot2)
newx = data.frame(x = seq(min(x), max(x), length = 100))
library(ggplot2); library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
head(diamond)
newx = data.frame(x = seq(min(x), max(x), length = 100))
head(newx)
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
fit <- lm(y ~ x)
p1 = data.frame(predict(fit, newdata= newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1
p2
plot(p1)
p1
head(p1)
newx$x
new()
newx
head(newx)
head(p1)
p1$interval = "confidence"
p2$interval = "prediction"
p1$interval
p2$interval
source('~/Desktop/coursera-dss/Regression Modelling Week 2/Predictions.R')
tstat
?tstat
?t
?t.test
qt(0.05, 38)
?qt
qt(0.05, 38, lower.tail = F)
qt(0.025, 38, lower.tail = F)
library(ggplot2); library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
newx = data.frame(x = seq(min(x), max(x), length = 100))
newx
head(newx)
p1 = data.frame(predict(fit, newdata = newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1$interval = "confidence"
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
ps$x
p1$x
dat = rbind(p1, p2)
names(dat)[1] = "y"
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
library(ggplot2); library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata = newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
p1
p2
head(p1)
head(p2)
p1$interval = "confidence"
p1
p2$interval = "prediction"
p1$x = newx$x
p2$x = newx$x
head(v1)
head(p1)
dat = rbind(p1, p2)
head(dat)
g = ggplot(dat, aes(x = x, y = y))
g
g = ggplot(dat, aes(x = x, y = y))
g
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
g = ggplot(dat, aes(x = x, y = y))
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g = g + geom_line()
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
names(dat)[1] = "y"
head(dat)
p1
head(p1)
names(dat)[1] = "y"
dat
head(dat)
g = ggplot(dat, aes(x = x, y = y))
g
g = g + geom_ribbon(aes(ymin = lwr, ymax = upr, fill = interval), alpha = 0.2)
g
g = g + geom_line()
g
g = g + geom_point(data = data.frame(x = x, y=y), aes(x = x, y = y), size = 4)
g
g
g
library(ggplot2); library(UsingR); data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
newx = data.frame(x = seq(min(x), max(x), length = 100))
p1 = data.frame(predict(fit, newdata = newx,interval = ("confidence")))
p2 = data.frame(predict(fit, newdata = newx,interval = ("prediction")))
source('~/Desktop/coursera-dss/Regression Modelling Week 2/Predictions.R')
source('~/Desktop/coursera-dss/Regression Modelling Week 2/Predictions.R')
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
install.packages("GGally")
require(datasets); data(swiss); require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
wrap_fn_with_param_arg()
wrap_fn_with_param_arg()
params
?params
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
g = ggpairs(swiss, lower = list(continuous = "smooth"),params = c(method = "loess"))
my_fn <- function(data, mapping, method="loess", ...){
p <- ggplot(data = data, mapping = mapping) +
geom_point() +
geom_smooth(method=method, ...)
p
}
g = ggpairs(swiss, lower = list(continuous = my_fn))
g
summary(lm(Fertility ~ . , data = swiss))$coefficients
class(swiss$Agriculture)
head(swiss$Agriculture)
summary(swiss)
?swiss
pt(-2.448)
pt(-2.448, df = 45)
pt(-2.448, df = 45) * 2
pt(-2.448, df = 41) * 2
pt(-2.448, df = 40) * 2
pt(-2.448, df = 41) * 2
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
summary(lm(Fertility ~ . , data = swiss))$coefficients
summary(lm(Fertility ~ Agriculture, data = swiss))$coefficients
lm(Fertility ~ . , data = swiss)
lm(Fertility ~ . , data = swiss)
lm(Fertility ~ . , data = swiss)
summary(lm(Fertility ~ . , data = swiss))
