freqData <- as.data.frame(table(x, y))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
myPlot <- function(beta){
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_abline(intercept = 0, slope = beta, size = 3)
mse <- mean( (y - beta * x) ^2 )
g <- g + ggtitle(paste("beta = ", beta, "mse = ", round(mse, 3)))
g
}
manipulate(myPlot(beta), beta = slider(0.6, 1.2, step = 0.02))
?lm
?lm
?I
lm(I)
?lm
?I
I(x)
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data = galton)
lm((child - mean(child)) ~ (parent - mean(parent)) - 1, data = galton)
lm(I(child - mean(child)) ~ I(parent - mean(parent)) - 1, data = galton)
child - mean(child)
test1 <- galton$child - mean(galton$child)
test2 <- I(galton$child - mean(galton$child))
test1
head(test1)
head(test2)
class(test1)
class(test2)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
lm1 <- lm(galton$child ~ galton$parent)
g <- g + geom_abline(intercept = coef(lm1)[1], slope = coef(lm1)[2], size = 3, colour = grey(.5))
g
source('~/Desktop/coursera-dss/Regression Modelling Week 1/Introductory Data Example.R')
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x)))
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(x) / sd(y)
beta0 <- mean(x) - beta1 * mean(y)
rbind(c(beta0, beta1), coef(lm(x ~ y)))
y <- galton$child
x <- galton$parent
beta1 <- cor(y, x) *  sd(y) / sd(x)
beta0 <- mean(y) - beta1 * mean(x)
rbind(c(beta0, beta1), coef(lm(y ~ x))) # manual calculation and lm calculation is exactly the same
yc <- y - mean(y)
xc <- x - mean(x)
yc <- y - mean(y)
xc <- x - mean(x)
beta1 <- sum(yc * xc) / sum(xc ^ 2)
c(beta1, coef(lm(y ~ x))[2])
lm(yc ~ xc - 1) # regression through origin
yn <- (y - mean(y))/sd(y)
sd(yn)
xn <- (x - mean(x))/sd(x)
sd(xn)
c(cor(y, x), cor(yn, xn)), coef(lm(yn ~ xn)[2])
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn)[2]))
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn)[2]))
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
freqData <- as.data.frame(table(galton$child, galton$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
names(freqData) <- c("child", "parent", "freq")
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_smooth(method="lm", formula=y~x)
g
g <- g + geom_smooth(method="lm", formula=y~x)
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_smooth(method="lm", formula=y~x)
g
dev.off()
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g <- g + geom_smooth(method="lm", formula=y~x)
g
library(dplyr)
freqData <- as.data.frame(table(galton$child, galton$parent))
names(freqData) <- c("child", "parent", "freq")
freqData$child <- as.numeric(as.character(freqData$child))
freqData$parent <- as.numeric(as.character(freqData$parent))
g <- ggplot(filter(freqData, freq > 0), aes(x = parent, y = child))
g <- g  + scale_size(range = c(2, 20), guide = "none" )
g <- g + geom_point(colour="grey50", aes(size = freq+20, show_guide = FALSE))
g <- g + geom_point(aes(colour=freq, size = freq))
g <- g + scale_colour_gradient(low = "lightblue", high="white")
g
g <- g + geom_smooth(method = "lm", formula = y ~ x)
g
rbind(c(beta0, beta1), coef(lm(y ~ x))) # manual calculation and lm calculation is exactly the same
c(beta1, coef(lm(y ~ x))[2])
yn <- (y - mean(y))/sd(y)
xn <- (x - mean(x))/sd(x)
c(cor(y, x), cor(yn, xn), coef(lm(yn ~ xn))[2])
x <- rnorm(100)
y <- rnorm(100)
?ord
?order
?order
?order
?order
odr <- order(x)
odr
x[orr[100]] # The maximum x
x[odr[100]] # The maximum x
y[odr[100]]
odr
x
odr
odr[100]
x[58]
?order
rm(odr, x, y)
x = c(1,5,4,3,6,2)
odr <- order(x)
odr
odr <- order(x)
y[odr[100]]
y = c(10,11,12,13,14,15)
y[odr[100]]
x[odr(6)]
x[odr([6]]
y = c(10,11,12,13,14,15)
y[odr[]]
x = c(1,5,4,3,6,2)
odr <- order(x)
x[odr([6]]
y = c(10,11,12,13,14,15)
y[odr[]]
x[odr([6]]
y = c(10,11,12,13,14,15)
y[odr[]]
x[odr[6]]
x = c(1,5,4,3,6,2)
odr <- order(x)
x[odr[6]]
odr
x
odr
odr[6]
x = c(1:10)
odr <- order(x)
odr <- order(x)
x = c(1, 3, 7, 6, 5, 4, 8, 2, 9)
odr <- order(x)
x[odr[10]]
x[odr[9]]
x = c(1, 3, 7, 6, 5, 4, 9, 2, 8)
odr <- order(x)
y = c(-1, -3, -7, -6, -5, -4, -9, -2, -8)
x[odr[9]]
x[odr[8]]
x[odr[7]]
rm(x,y,odr)
x <- c(1,2,3)
y <- c(20, 19, 18)
odr <- order(x)
x <- c(1,3,2)
odr <- order(x)
x <- c(1,3,2)
y <- c(20, 19, 18)
odr <- order(x)
x <- c(5,2,3,1,4)
odr <- order(x)
odr <- order(x)
odr <- order(x)
odr <- order(x)
odr <- order(x)
a <- c(45, 50, 10, 96)
order(a)
odr <- order(a)
x <- rnorm(100)
y <- rnorm(100)
odr <- order(x)
x[odr[100]]
y[odr[100]]
library(UsingR)
data(father.son)
library(UsingR)
data(father.son)
y <- (father.son$sheight - mean(father.son$sheight)) / sd(father.son$sheight)
x <- (father.son$fheight - mean(father.son$fheight)) / sd(father.son$fheight)
rho <- cor(x, y)
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g = g + xlim(-4, 4) + ylim(-4, 4)
g = g + geom_abline(intercept = 0, slope = 1)
g = g + geom_vline(xintercept = 0)
g = g + geom_hline(yintercept = 0)
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g
g = g + geom_point(size = 6, colour = "black", alpha = 0.2)
g
g = g + geom_point(size = 4, colour = "salmon", alpha = 0.2)
g
g = g + xlim(-4, 4) + ylim(-4, 4)
f
g
g = g + geom_abline(intercept = 0, slope = 1)
g
g = g + geom_vline(xintercept = 0)
g
g = g + geom_hline(yintercept = 0)
g
g = g + geom_abline(intercept = 0, slope = rho, size = 2)
g
g = g + geom_abline(intercept = 0, slope = 1 / rho, size = 2)
g
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g = g + xlab("Mass (carats)")
g = g + ylab("Price (SIN $)")
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g = g + geom_smooth(method = "lm", colour = "black")
g
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit <- lm(price ~ carat, data = diamond)
coef(fit)
fit
summary(fit)
source('~/Desktop/coursera-dss/Regression Modelling Week 1/Using regression coefficients for prediction.R')
fit2 <- lm(price ~ I(carat - mean(carat)), data = diamond)
coef(fit2)
mean(diamond$carat)
fit3 <- lm(price ~ I(carat * 10), data = diamond)
coef(fit3)
newx <- c(0.16, 0.27, 0.34)
coef(fit)[1] + coef(fit)[2] * newx
predict(fit, newdata = data.frame(carat = newx))
source('~/Desktop/coursera-dss/Regression Modelling Week 1/Using regression coefficients for prediction.R')
coef(fit)
coef(fit2)
coef(fit3)
data(diamond)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit)
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
e <- resid(fit) # residual plot of the linear regression
e
max(e)
e
abs(e -(y - yhat))
resid
e
max(abs(e -(y - yhat)))
max(e)
e <- resid(fit) # residual plot of the linear regression
yhat <- predict(fit)
max(abs(e -(y - yhat)))
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
max(fit)
max(e)
e
?resid
max(abs(e -(y - yhat)))
sum(e) # This has to be 0
sum(e * x) # This also has to be 0
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
= ggplot(data.frame(x = x, y = resid(lm(y ~ x))),
aes(x = x, y = y))
= ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
e = c(resid(lm(price ~ 1, data = diamond)), # residuals variation around the average price
resid(lm(price ~ carat, data = diamond))) # residuals variation around the regression line
plot(lm(price ~ 1))
lm(price ~ 1)
plot(lm(price ~ 1), data = diamond)
plot(lm(price ~ 1), data = diamond)
plot(fit)
ok
fit = factor(c(rep("Itc", nrow(diamond)), # create factor variable that labels the set of residuals, label the intercept-only model residuals
rep("Itc, slope", nrow(diamond)))) # label the intercept and slope residuals
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
source('~/Desktop/coursera-dss/Regression Modelling Week 1/Residuals Coding Example.R')
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
data(diamond)
y <- diamond$price; x <- diamond$carat; n <- length(y)
fit <- lm(y ~ x)
e <- resid(fit) ### residual plot of the linear regression
yhat <- predict(fit)
max(abs(e -(y - yhat))) ### highest DIFFERENCE between residual values calculated in two different ways
max(abs(e - (y - coef(fit)[1] - coef(fit)[2] * x)))
sum(e) # This has to be 0
sum(e * x) # This also has to be 0
plot(diamond$carat, diamond$price,
xlab = "Mass (carats)",
ylab = "Price (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(fit, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col = "red" , lwd = 2)
plot(x, e,
xlab = "Mass (carats)",
ylab = "Residuals (SIN $)",
bg = "lightblue",
col = "black", cex = 2, pch = 21,frame = FALSE)
abline(h = 0, lwd = 2)
for (i in 1 : n)
lines(c(x[i], x[i]), c(e[i], 0), col = "red" , lwd = 2)
x = runif(100, -3, 3); y = x + sin(x) + rnorm(100, sd = .2);
library(ggplot2)
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
x <- runif(100, 0, 6); y <- x + rnorm(100,  mean = 0, sd = .001 * x);
g = ggplot(data.frame(x = x, y = y), aes(x = x, y = y))
g = g + geom_smooth(method = "lm", colour = "black")
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g
g = ggplot(data.frame(x = x, y = resid(lm(y ~ x))), aes(x = x, y = y))
g = g + geom_hline(yintercept = 0, size = 2);
g = g + geom_point(size = 7, colour = "black", alpha = 0.4)
g = g + geom_point(size = 5, colour = "red", alpha = 0.4)
g = g + xlab("X") + ylab("Residual")
g
diamond$e <- resid(lm(price ~ carat, data = diamond))
g = ggplot(diamond, aes(x = carat, y = e))
g = g + xlab("Mass (carats)")
g = g + ylab("Residual price (SIN $)")
g = g + geom_hline(yintercept = 0, size = 2)
g = g + geom_point(size = 7, colour = "black", alpha=0.5)
g = g + geom_point(size = 5, colour = "blue", alpha=0.2)
g
e = c(resid(lm(price ~ 1, data = diamond)), # residuals variation around the average price
resid(lm(price ~ carat, data = diamond))) # residuals variation around the regression line
fit = factor(c(rep("Itc", nrow(diamond)), # create factor variable that labels the set of residuals, label the intercept-only model residuals
rep("Itc, slope", nrow(diamond)))) # label the intercept and slope residuals
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
e = c(resid(lm(price ~ 1, data = diamond)), # residuals variation around the average price
resid(lm(price ~ carat, data = diamond))) # residuals variation around the regression line
fit = factor(c(rep("Itc", nrow(diamond)), # create factor variable that labels the set of residuals, label the intercept-only model residuals
rep("Itc, slope", nrow(diamond)))) # label the intercept and slope residuals
g = ggplot(data.frame(e = e, fit = fit), aes(y = e, x = fit, fill = fit))
g = g + geom_dotplot(binaxis = "y", size = 2, stackdir = "center", binwidth = 20)
g = g + xlab("Fitting approach")
g = g + ylab("Residual price")
g
getwd()
